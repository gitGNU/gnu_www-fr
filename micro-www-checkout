#!/bin/bash

# NAME
#    micro-www-checkout - create a minimized www directory for transvalid-batch

# SYNOPSIS
#    micro-www-checkout -t /TEAM/DIR [-l 'LANG1 [LANG2]...'] [-u CVS_LOGIN]
#    or
#    micro-www-checkout -l 'LANG1 [LANG2]...' [-u CVS_LOGIN]

# DEPENDENCIES
#    cvs, rsync

# DESCRIPTION
#    This script checks out the files required by transvalid-po to generate
#    HTML pages from POs for a specific language and validate them.
#    Transvalidation with GNUN requires some additional files.
#
#    Method:
#    1. A list of the potentially useful files is obtained from a dry run of
#       rsync on the CVS repository, exluding irrelevant directories and
#       keeping only files with .po and .html extensions.
#    2. The rsync list is further processed, to build a checkout list
#       containing the language-specific POs and the corresponding original
#       HTMLs.
#    3. The listed files are downloaded by cvs (with login if the ID is
#       provided, otherwise anonymous).
#
#    Disadvantage:
#    Update of the micro-www directory does not download the original HTMLs
#    which have not been translated to the selected language. Those must be
#    checked out separately. The corresponding POT files must be downloaded
#    once to create the PO but they don't need to be tracked if www and
#    www-team are updated with cvs-sync (they would be required by the sync
#    target of GNUN).
#
# OPTIONS AND CURRENT SETTINGS
#    Displayed by:   micro-www-checkout -h
#
#    Configuration file:
#    The command-line parameters can be set once and for all in a configuration
#    file (also used by transvalid-batch, www-commit, cvs-sync, and
#    check-links), with the syntax:
#       parameter1="value1"
#       parameter2="value2"
#    This configuration overrides the default settings but is superseded by the
#    command line. The file is $HOME/.config/gnu-profile by default. This can
#    be changed by editing the script.
#    The files corresponding to the team specified in the profile will always
#    be checked out, provided www-team exists locally.

#==============================================================================

set -e
set -o pipefail

function version () {
cat <<EOF
${0##*\/} version 0.1
Copyright (C) 2013, 2014 Thérèse Godefroy
You may redistribute this script and/or modify it under the terms
of the Creative Commons CC0 license.
EOF
}

function close_term () {
  echo -e '\n*** Close the terminal window or press Return.'; read OK
  test -z "$OK" && exit $1
}

echo "${0##*\/} - create a minimized www directory for transvalid-batch"

## Parameters

conf="$HOME/.config/gnu-profile"
langs=""
teamdir=""
user="anonymous"
protocole="pserver"
test -f $conf && source $conf

function usage () {
cat <<EOF

Usage:
  micro-www-checkout -t /TEAM/DIR [-l 'LANG1 [LANG2]...'] [-u CVS_LOGIN]
  or  micro-www-checkout -l 'LANG1 [LANG2]...' [-u CVS_LOGIN]

  The script checks out the POs for a list of languages and the
  corresponding original pages, from the CVS repo of www.gnu.org.

Options and current settings:

  -l 'LANG1 LANG2...'        [$langs]
      Specify one or several space-separated language codes (one
      code is required if no working directory is specified)

  -u CVS_LOGIN               [$user]
      Specify your login if you have write access to www (optional)

  -t /TEAM/DIRECTORY         [$teamdir]
      Specify the absolute path to the team directory
      (required if no language code is specified)

  -V  Display version info and exit
  -h  Display this help and exit

The parameters can be specified in a configuration file:
      $conf
One line per parameter, with syntax: param='VALUE'

Report bugs to <godef.th@free.fr>

EOF
}

# Parse the command line.
OPTIND=1
while getopts "h?Vl:t:u:" opt; do
  case "$opt" in
    h | \? ) usage; close_term 0 ;;
    V ) version; close_term 0 ;;
    l ) langs=$OPTARG ;;
    t ) teamdir=$OPTARG ;;
    u ) user=$OPTARG ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

## Get valid language codes

# Several methods:
# - from the command line or conf file;
langs=($langs)
n=${#langs[@]}

# - from the name of the team directory if it exists (move to its parent dir);
if test "$teamdir" != "$HOME" -a -d "$teamdir"; then
  cd "$teamdir" && cd ../
  l=${teamdir#*www-}
  langs[$n]=$l
else                  # (or else create the parent dir of www and move there);
  mkdir -p $HOME/GNU && cd $HOME/GNU
fi

# - from user input.
if test -z "$langs"; then
  echo -e "\n*** Please enter one or several language codes."; read l
  langs=($l)
fi

# Test the validity of the language codes.
ref_lang_codes='af ar az bg bn bs ca cs da de el en eo es et fa fi fr gl he \
hr hu id it ja kn ko mk ml lt nb nl nn pl pt pt-br ro ru sh sk sl sq sr sv ta \
th tl tr uk uz vi zh-cn zh-tw'
vlangs=""
for l in ${langs[@]}; do
  [[ "$ref_lang_codes" =~ "$l" ]] && vlangs=($vlangs $l)
done
test -z "$vlangs" && (echo 1>&2 "!!! No valid language."; close_term 1)

## List the relevant files in www

# Create temporary files.
TMP1=$(mktemp -t co.XXXXXX) || close_term 1  # rsync output
TMP2=$(mktemp -t co.XXXXXX) || close_term 1  # *.lang.po
TMP3=$(mktemp -t co.XXXXXX) || close_term 1  # *.lang.html / co list: verified
TMP4=$(mktemp -t co.XXXXXX) || close_term 1  # checkout list: rough / final
trap 'rm -f "$TMP1" "$TMP2" "$TMP3" "$TMP4"' EXIT

if [ -d "www" ]; then
  mv www www.bak || close_term 1
fi

# List the files in the www repository with a dry run of rsync, excluding
# some irrelevant directories and files. The destination directory is
# specified to avoid listing the file attributes, but it is not created.
rsync -anv --exclude "Attic" \
           --exclude "server/source/" \
           --exclude "server/staging/" \
           --include "software/po/" \
           --exclude "software/*/" \
           --exclude "www/www*/" \
           --exclude "server/gnun/" \
           --include "*.po,v" \
           --include "*.html,v" \
           --include "*/" \
           --exclude "*" \
           --prune-empty-dirs \
  rsync://cvs.sv.gnu.org/web/www/www www-cvs/ > $TMP1

# Weed out the rsync messages and the directories, and remove the ",v"
# extension.
sed -i -e '/^www/!d' \
       -e '/\/$/d' \
       -e 's:,v$::' $TMP1

# Select what's needed for each language.
# NOTE: if some translations are not gnunified, lines (1), (2), (3)  and (5)
# should be uncommented, and line (4) may be commented out.

for lang in ${vlangs[@]}; do
  echo "language code: $lang"

  sed -n "/\\.$lang\\.po/p" $TMP1 > $TMP2                         # *.lang.po
  cat $TMP2 >> $TMP4
#  sed -n "/\\.$lang\\.html/p" $TMP1 > $TMP3                       # (1) *.lang.html
#  cat $TMP3 >> $TMP4                                              # (2)
#  sed "s:\\.po$:-diff.html:" $TMP3 >> $TMP4                       # (3) *.lang-diff.html
  sed "s:po/\\([^/]*\\)\\.$lang\\.po$:\\1.html:" $TMP2  >> $TMP4  # (4) from *.lang.po
#  sed "s:$lang\\.html$:html:" $TMP3 >> $TMP4                      # (5) from *.lang.html

  # Check that all the listed files exist (some POs may not have corresponding
  # HTMLs because they have been renamed or misplaced, or the HTML has been
  # removed from the repository).
  while read f; do
    grep "$f" $TMP1 >> $TMP3 || true
  done < $TMP4
done

# List each file only once
sort $TMP3 | uniq > $TMP4

# Checkout the listed files.
if [ -s $TMP4 ]; then
  # Define the protocole.
  if test -n "$user" -a "$user" != "anonymous"; then
    protocole="ext"
  fi
  cvs -z3 -d:$protocole:$user@cvs.savannah.gnu.org:/webcvs/www co $(< $TMP4)

else
  echo  1>&2 "!!! There is no file in the checkout list." && close_term 1
fi

close_term 0
