#!/bin/bash

# NAME
#    transvalid-batch - batch transvalidation of PO files from www.gnu.org

# SYNOPSIS
#    transvalid-batch [OPTIONS] .../TEAM_DIRECTORY

# DEPENDENCIES
#    * Required: transvalid-po in the same directory as transvalid-batch,
#    * Optional: cvs, git.

# DESCRIPTION
#    transvalid-batch calls transvalid-po for a list of modified PO files,
#    created either manually or with tools provided by Git or CVS (other VCS's
#    could be added as needed). If the team directory (www-team) exists, it is
#    better to modify and validate the POs there, but validation can also be
#    done in www because it doesn't change any CVS-tracked files. 
#
#    Requirements:
#    * www-team must have the same parent as www, or be www itself.
#    * Its name must be www* (normally www-$lang).
#    * If www-team is under Git control, the changes must be staged for commit
#      on branch master.
#
#    Functions:
#    * The script lists the POs that have been modified locally; the list can
#      be amended by hand.
#    * Each item is transvalidated.
#    * If www-team is under Git control, there is an option to commit the
#      batch of POs provided they are all valid.

# OPTIONS AND CURRENT SETTINGS
#    Displayed by:   transvalid-batch -h
#
#    Configuration file:
#    The command-line parameters can be set once and for all in a configuration
#    file (also used by cvs-sync, www-commit, micro-www-checkout, and
#    check-links), with the syntax:
#       parameter1="value1"
#       parameter2="value2"
#    This configuration overrides the default settings but is superseded by the
#    command line. The file ($conf) is specified under "Parameters".

#==============================================================================

set -e
set -o pipefail

function version () {
cat <<EOF
$0 version 0.1
Copyright (C) 2013, 2014 Thérèse Godefroy
You may redistribute this script and/or modify it under the terms
of the Creative Commons CC0 license.
EOF
}

function usage () {
cat <<EOF

Usage: ${0##*\/} [OPTIONS] .../TEAM_DIRECTORY

  The script assumes the context of www.gnu.org. It helps create a list of
  modified POs. Then, for each item of the list, it calls transvalidate-po
  to generate the translated page and validate both the HTML and the PO.
  NOTE: the team directory can be www itself.

Options and current settings:

  -e PREFERRED_EDITOR        [$editor]
      Specify the command-line editor (optional).

  -m 'COMMIT MESSAGE'        [$message]
      Specify a commit message (optional, only applies to Git).

  -V  Display version info and exit.
  -h  Display this help and exit.

  The parameter values can be set in a configuration file:
       $conf
  One line per parameter, with syntax: param='VALUE'

Report bugs to <godef.th@free.fr>
EOF
}

## Parameters

conf="$HOME/.profile"
teamdir=""
editor=""
message=""
test -s "$conf" && source $conf

# Parse the command line.
OPTIND=1
while getopts "h?Ve:m:" opt; do
  case "$opt" in
    h | \? ) usage; exit 0 ;;
    V ) version; exit 0 ;;
    e ) editor=$OPTARG ;;
    m ) message=$OPTARG ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# If "editor" isn't set yet, try to guess it.
if [ -n "$editor" ]; then
  editor=$editor
elif  [ -f /usr/bin/editor ]; then
  editor=/usr/bin/editor
elif [ -n "$EDITOR" ] && [ -f "$EDITOR" ]; then
  editor=$EDITOR
else
  editor=vi
fi


## Functions

function close_term () {
  sleep 10
  exit $1
}

function create_valid_list () {
# creates a list of transvalidation candidates and displays it for edition.

  # If www-team is a Git repository, use git diff.
  if [ -d .git ]; then
    # What follows is for fuzzy heads who launch a script from the dashboard
    # without checking which branch they are on.
    # http://makandracards.com/makandra/12107-git-show-current-branch-name-only
    curr_branch=$(git rev-parse --abbrev-ref HEAD)
    if [ "$curr_branch" == 'master' ]; then
      git diff --name-only --staged > $valid_list
    else
      echo -e "\n!!! Please move to branch master."
      close_term 1
    fi

  # If www-team is a CVS work tree, use cvs diff.
  elif [ -d CVS ]; then
    cvs -nq diff |
    grep "RCS file:.*\.po,v" |
    sed -e 's%RCS file: /webcvs/www/www/%%' \
        -e "s%RCS file: /webcvs/www/www-$lang/%%" \
        -e 's%,v$%%' > $valid_list || true

  else
    echo 1>&2 "!!! Unable to create a validation list."
    close_term 1
  fi

  # Remove head-include*.
  sed -i '/head-include/d' $valid_list

  # Look at the list and edit it as needed.
  echo -e "\n*** Validation list:"
  cat $valid_list
  echo -e "\n    [Enter]     : \"Continue\"
    [e]         : \"Edit\"
    [other key] : \"Quit\""
  read -s -n1 choice
  case "$choice" in
    "") ;;
    "e") "$editor" $valid_list ;;
    *) echo -e "\n    Bye"; close_term 0 ;;
  esac
}

function select_message () {
# lets the user select a message from the configuration file.
  echo -e "    Please select a commit message:
    [1]         : \"$message1\"
    [2]         : \"$message2\"
    [3]         : \"$message3\"
    [4]         : \"$message4\"
    [5]         : \"$message5\"
    [other key] :  no commit"
  read -s -n1 choice
  case "$choice" in
    1) message=$message1 ;;
    2) message=$message2 ;;
    3) message=$message3 ;;
    4) message=$message4 ;;
    5) message=$message5 ;;
    *) message= ;;
  esac
}

#====================
echo -e "${0##*\/} - generate HTML from a list of POs and validate"


## Input

test -n "$1" && teamdir=$1
teamdir=${teamdir%\'}; teamdir=${teamdir#\'}

# Make sure the directory is reachable,
cd "$teamdir" 2> /dev/null || echo "*** Can't reach $teamdir;
    staying in $(pwd)."
# otherwise stay in the current dir. In any case, this makes the path absolute.
teamdir="$(pwd)"
# Make sure it's a likely www-team candidate.
d="${teamdir##*/www}"
if [ "$d" == "$teamdir" ] || [ "${d%/*}" != "$d" ]; then
  echo "!!! $teamdir doesn't seem to qualify as a team directory."
  close_term 1
fi

## Make the validation list

valid_list=$(mktemp -t tvb.XXXXXX) || close_term 1
trap 'rm -f "$valid_list"' EXIT

batch_exit_code=0
create_valid_list

## Transvalidate the POs

if [ ! -s "$valid_list" ]; then
  echo -e  1>&2 "\n!!! There is no PO to work on.
    If you use Git, please make sure your changes are staged.\n"
  close_term 1
else
  while read po; do
    transvalid-po "$teamdir/$po" || batch_exit_code=$?
  done < "$valid_list"

## Evaluate the result

  if [ "$batch_exit_code" = "0" ]; then
    echo -e "\n*** The POs are OK."
    # [Git only] Commit the POs to the local repo.
    if [ -d .git ]; then
      git add $(< $valid_list)
      if [ "$(git diff --name-only --staged)" ]; then
        [ -z "$message" ] && select_message
        if [ -z "$message" ]; then
          echo -e "    The POs are ready to commit."
        else
          git commit -m "$message" $(< $valid_list)
          echo -e "    The changes have been committed."
        fi
      fi
    fi
  else
    echo -e "\n!!! There is a problem with at least one PO."
  fi
fi

close_term $batch_exit_code
