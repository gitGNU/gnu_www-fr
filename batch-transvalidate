#!/bin/bash

# Batch transvalidation of PO files


# Definition

# To “transvalidate” is to transform a PO file into HTML and validate the
# result. The word is not in the dictionary... So what?  :-)

# Principle

# This script aims to make life easier for the average translator who works
# with PO files and would like to generate HTML pages for proofreading and
# validation, without going through the standard GNUmakefile process.
# Indeed, PO transvalidation by the standard method often regenerates the
# POT and plays havoc with later synchronizations of www with the CVS
# repository. To bypass the GNUmakefile, the POs are updated/modified in
# www-lang and the translated page is built in the same directory with po4a
# (without POT regeneration), then the translated page is validated with
# gnun-validate-html and reformatted.

# The script is interactive. The input can be either a single PO or a list
# that the script creates by detecting the modified POs.

# Prerequisites

#    - www and www-lang have a common top directory.
#    - www is synchronized with its CVS repository and hasn't been
#      “polluted” by previous transvalidations by the standard method.
#    - if www-lang is a Git repository, the changes must be either unstaged,
#      or staged for commit.

# What the script does

# 1. It helps the user create a configuration file (this could be done with
#    Debconf some day).
# 2. It helps prepare the list of POs to transvalidate:
#    - it checks for remaining fuzzy or untranslated strings in www-lang and
#      stops if it finds any, to let the user choose what to do next;
#    - it lists the files that have been modified locally in www-lang,
#      by using either “cvs -nq diff” + a filter, or “git diff --name-only
#      --staged”, or else GNUN's report + a filter; the list can be amended
#      by hand; alternatively, a single PO can be specified in the command
#      line.
# 3. For each item in the list:
#    - a simplified header is added to the master document, as well as
#      the missing tags, then the SSI directives are inactivated to
#      avoid problems with the includes (it did happen at least once);
#    - to make proofreading of the HTML easier, the “GNUN-split” tags of the
#      template are replaced with <br />\n/*split*/\n<br />;
#    - the translated page is generated with po4a-translate;
#    - the page is validated with gnun-validate-html;
#    - it is reformatted with msgcat;
#    - the PO header is updated and the comments removed.
# 4. When www-lang is under Git control, the batch of POs is committed
#    locally if all of them are valid. This could also be done with CVS,
#    but then it would be more difficult to revert the commit.

# The options and current parameters are displayed by:
#      batch-transvalidate -h

############################################################################

# Copyright (C) 2013 Free Software Foundation, Inc.

# This file is part of GNUnited Nations.

# GNUnited Nations is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# GNUnited Nations is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNUnited Nations.  If not, see <http://www.gnu.org/licenses/>.

############################################################################

function version () {
cat <<EOF
batch-transvalidate (GNUnited Nations) 0.7
Copyright (C) 2013 Free Software Foundation, Inc.
You may redistribute copies of GNUnited Nations
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
EOF
}

set -e
set -o pipefail

params=$#
branch=
dir=$HOME/GNU
editor=
lang=
message=
po=
translator=

# Set the permanent parameters from the profile, if present.
if [ -f $HOME/.config/gnun/profile ]; then
  source $HOME/.config/gnun/profile
fi

function usage () {
cat <<EOF

Usage: batch-transvalidate OPTIONS [OPTIONS]

Options and current settings:

  -b  --branch=GIT_BRANCH               [$branch]
      Specify the Git working branch (optional)

  -d, --dir=/DIREC/TORY                 [$dir]
      Specify the absolute path to the common top directory of www
      and www-$lang (required)

  -e, --editor=PREFERRED_EDITOR         [$editor]
      Specify the command-line editor (optional)

  -l, --lang=CODE                       [$lang]
      Specify the language code (required)

  -m, --message="COMMIT MESSAGE"        [$message]
      Specify a commit message, such as "Update", "Proofreading by...",
      "New translation by...", etc. (optional)

  -p  --po=PATH/TO/ARTICLE.$lang.po        [$po]
      Do not use a list, specify the path to the PO, relative to
      www-$lang (optional)

  -t, --translator='Full Name <email>'  [$translator]
      Specify the name and email address of the translator (optional)

  -V, --version                         Display version info and exit

  -h, --help                            Display this help and exit

The parameters can be specified in a configuration file:
      $HOME/.config/gnun/profile
One line per parameter, with syntax: param="VALUE"

Report bugs to bug-gnun@gnu.org
GNUnited Nations home page: <http://www.gnu.org/software/gnun/>
General help using GNU software: <http://www.gnu.org/gethelp/>
EOF
}

# Parse the command line.
while [ ${params} -ge 1 ]; do
  case "$1" in
     -h | --help )
    usage
    exit 0
    ;;
     -V | --version )
    version
    exit 0
    ;;
     -b | --branch )
    shift
    params=$((${params}-1))
    branch="$1"
    ;;
     --branch=* )
    branch="${1#--branch=}"
    ;;
     -d | --dir )
    shift
    params=$((${params}-1))
    dir="$1"
    ;;
     --dir=* )
    dir="${1#--dir=}"
    ;;
     -e | --editor )
    shift
    params=$((${params}-1))
    editor="$1"
    ;;
     --editor=* )
    editor="${1#--editor=}"
    ;;
     -l | --lang )
    shift
    params=$((${params}-1))
    lang="$1"
    ;;
     --lang=* )
    lang="${1#--lang=}"
    ;;
     -m | --message )
    shift
    params=$((${params}-1))
    message="$1"
    ;;
     --message=* )
    message="${1#--message=}"
    ;;
     -p | --po )
    shift
    params=$((${params}-1))
    po="$1"
    ;;
     -p | --po )
    shift
    params=$((${params}-1))
    po="$1"
    ;;
     --po=* )
    po="${1#--po=}"
    ;;
     -t | --translator )
    shift
    params=$((${params}-1))
    translator="$1"
    ;;
     --translator=* )
    translator="${1#--translator=}"
    ;;
     * )
    break
    ;;
  esac
  params=$((${params}-1))
  shift
done

if [ ${params} -ne 0 ]; then
  echo 1>&2 "*** Unrecognized option “$1”.  See --help for details."
  exit 1
fi

if [ ! -d "${dir}" ]; then
  echo 1>&2 "*** Error: Directory “$dir” doesn't exist."
  exit 1
fi

if [ ! -d "${dir}/www" ]; then
  echo 1>&2 "*** Error: The www directory was not found. Please move it
    to $dir or install it there and start again."
  exit 1
fi

# If “lang” and “editor” aren't set yet, try to guess them.
if [ -f /usr/bin/editor ]; then
  editor=/usr/bin/editor
elif [ -n "$EDITOR" ] && [ -f $EDITOR ]; then
  editor=$EDITOR
else
  # It would have been nicer to write "emacs" here but this is just too
  # unrealistic. Most standard distributions don't include emacs, but they
  # will have vi.
  editor=vi
fi

cd $dir
if [ ! -d "www-$lang" ]; then
  echo "*** Trying to guess your language code and working directory..."
guessed_wdir=$(ls | grep "www-")
  if [ -n "$guessed_wdir" ]; then
    echo -e "*** One of these might be your working directory:\n
$guessed_wdir\n
*** If the first (or only) possibility is correct, press [Enter]
    If it is not correct, type your language code, then [Enter]."
    read choice
    case "$choice" in
      "")
        wdir=$(ls | grep -m 1 "www-")
        lang=${wdir#www-}
        ;;
      *)
        lang="$choice"
        if [ ! -d "www-$lang" ]; then
          echo 1>&2 "*** Error: “$dir/www-$lang” doesn't exist."
          exit 1
        fi
        ;;
    esac
  else
    echo "*** Error: Your working directory was not found. Please move it
    to $dir or install it there and start again." 1>&2
    exit 1
  fi
fi

# Create a profile if there is none.
cd $HOME/.config
if [ -n "$lang" ] && [ ! -f gnun/profile ]; then
  mkdir -p gnun
cat > gnun/profile <<EOF
# Configuration file for batch-transvalidate

# Parameter values should be quoted if they contain spaces (double-quoted
# if they contain a variable), and there should be no space before, and no
# space after, the “=” sign.

lang=$lang
dir=$HOME/GNU
branch=$branch
editor=$editor

translator=
# Leave blank if you don't want to update the 'Last-Translator' field in
# the PO header. Otherwise, "translator" should be the same as in your PO
# editor, e.g.: translator="Full Name <email AT address>"

# Default commit messages:
message1=
message2=
message3=
EOF
  echo -e "*** A user profile has been created with the known parameters.
    Do you want edit it now?
          “Yes” = [Enter]    “No” = any other key\n"
    read -s -n1 OK
    if [ -z "$OK" ]; then
      editor $HOME/.config/gnun/profile
    fi
fi

function check_fuzz () {
  rm -f ../fuzz-report
  for f in $(find * -name \*.po); do
     # Check for fuzzy strings.
     if grep -q '^#, fuzzy' $f; then
       echo "$f is still fuzzy" >> ../fuzz-report
     fi
     # Check for untranslated strings.
     if sed -n '/^msgstr ""[[:space:]]*$/ {N;/\n[[:space:]]*$/p}' $f | grep -q msgstr; then
       echo "$f is not completely translated" >> ../fuzz-report
     fi
  done
  if [ -f ../fuzz-report ]; then
    echo "*** One or more files are not up-to-date:"
    cat ../fuzz-report
    echo -e "\n*** You are on hold,
    press [Enter] to resume, or any other key to quit."
    read -s -n1 choice
    case "$choice" in
      "")
        ;;
      *)
        echo "Bye"
        exit
        ;;
    esac
  fi
}

function create_valid_list () {
# creates a list of transvalidation candidates and displays it for edition.
# FIXME: The best method depends on the team's workflow.
  check_fuzz
  if [ -d CVS ]; then
    cvs -nq diff |
    grep "RCS file:" |
    sed -e "s;^RCS file: /webcvs/www/www-$lang/;;" \
        -e 's;,v$;;' > ../valid-list
  elif [ -d .git ] && [ -n "$branch" ]; then
    # What follows is for fuzzy heads who launch a script from the dashboard
    # without checking which branch they are on.
    curr_branch=$(git rev-parse --abbrev-ref HEAD)
# https://makandracards.com/makandra/12107-git-show-current-branch-name-only
    if [ "$curr_branch" != "$branch" ]; then
      git add .
      staged=$(git diff --name-only --staged )
      if [ -n "$staged" ]; then
        git commit -m "$(date +"%F %T")"
        echo -e "\n*** Changes to branch “$curr_branch” have been committed.
    You may want to amend the commit whenever you come back."
      fi
      git checkout $branch
    fi
    git add .
    git diff --name-only --staged > ../valid-list
  else
    if [ ! -f ../gnun-report.txt ]; then
      echo -e "*** Synchronize www-$lang with www and save gnun's report."
      make sync && make report > ../gnun-report.txt
    fi
    sed -e "/\\.$lang\\.po/!d" \
        -e 's/:[^:]*//' ../gnun-report.txt > ../valid-list
  fi
  $editor ../valid-list
}

function inactivate_ssi () {
# adds a minimal HTML header and the missing tags, then inactivates the SSI
# directives.
  read -r firstline < $1
  case $firstline in
    *server/header.html*)
    cat - $1 > $2 << EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="$lang" lang="$lang">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
EOF
    ;;
    *server/html5-header.html*)
    cat - $1 > $2 << EOF
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="$lang" lang="$lang">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
EOF
    ;;
    *)
    echo "*** $1 has no header-include."
    ;;
  esac
  sed -i -e '/server\/banner\.html"/c</head><body><div><div>' \
         -e 's/<!--#/<!-- /g' $2
}

function add_split_tags () {
# is adapted from function “add-gnun-tags” of the www GNUmakefile.
  sed -i -e '/<span[[:space:]]*$$/{:egin;N; />[^\n]*$$/! begin};' \
         -e 's,<span[[:space:]]\+class="gnun-split"></span>,\
<br />\n/*split*/\n<br />,' $1
}

function update_po_header () {
# updates the revision date and the last translator.
  date=$(date +'%F %R%z')
  sed -i -e "s,\\(Revision-Date: \\).*,\\1$date\\\\n\"," $1
  if [ -n "$translator" ]; then
    sed -i -e "s,\\(Last-Translator: \\).*,\\1$translator\\\\n\"," $1
  fi
}

function delete_comments () {
# removes useless comments (outdated messages that contain links outside
# gnu.org and fsf.org are kept).
  sed -e '/^"Outdated-Since/d' -e '/^# |/d' -e '/^#|/d' $1 |
  awk 'BEGIN {
  FS = " ";
  RS = ORS = "\n\n";
  }
  {
    if (!/#~/) {
      print;
    } else {
      FS = "href";
      for (n=2; n<=NF; n++) {
        if ($n !~ \
        /\\"http:\/\/("\n#~ ")?(www\.)?("\n#~ ")?(gnu|fsf)\.("\n#~ ")?org/ \
        && $n ~ /\\"http:\/\//) {
          print;
          next;
        }
      }
    }
  }' |
  sed ':egin /^\n*$/ {$d; N; begin}' > ../p && mv ../p $1
}

function create_addendum () {
# creates po4a addenda for translator's notes and translator's credits.
  echo "PO4A-HEADER:mode=after;position=$3;beginboundary=^" > ../add-$2
  sed -e '/*GNUN-SLOT: TRANSLATOR.S '"$2"'*/,/#. type: Content of:/!d' \
      -e '/GNUN-SLOT/d' -e '/^#/d' -e 's/^msgstr "//' \
      -e ':egin /"$/ {N; s,"\n",,; begin}' \
      -e 's,\\",",g' -e 's,\\n,\n,g' $1  >> ../add-$2
  sed -i 's,"$,,' ../add-$2
  echo '<br /><br />' >> ../add-$2
}

function transvalidate () {
# transforms a PO into HTML and validates the result.
  interm_exit_code=0
  echo -e "\n=== $po"
  # Strip the extension and the language code from the filename.
  article=$(echo ${po%."$lang".po})
  inactivate_ssi ../www/$article.html ../m
  add_split_tags ../m
  create_addendum $po NOTES 'footer.html"'
  create_addendum $po CREDITS 'timestamp start'

  # The po4a-translate “k” option, “Minimal threshold for translation
  # percentage to keep (ie, write) the resulting file”, is set at 50 to
  # allow proofreading of a partial translation or detection of faulty
  # strings (the default is 80).
  rm -f $article.$lang-local.html
  po4a-translate -f xhtml -M utf-8 -m ../m -p $po -k 50 -L utf-8 \
  -l $article.$lang-local.html -a ../add-CREDITS -a ../add-NOTES \
  || interm_exit_code=$?
  gnun-validate-html --root="." $article.$lang-local.html \
  || interm_exit_code=$?
  msgcat -w 79 -o $po $po || interm_exit_code=$?

  if [ "$interm_exit_code" = "0" ]; then
    delete_comments $po
    update_po_header $po
  else
    final_exit_code=$interm_exit_code
  fi
}

function select_message () {
# lets the user select a commit message among 3 defaults.
  echo "*** Please select a commit message:
        [1] $message1
        [2] $message2
        [3] $message3"
  read -s -n1 choice
  case "$choice" in
    1)
      message=$message1
    ;;
    2)
      message=$message2
    ;;
    3)
      message=$message3
    ;;
    *)
      message=
    ;;
  esac
}

## Main

cd $dir/www-$lang
final_exit_code=0

if [ -z "$po" ]; then
  create_valid_list
  if [ -s ../valid-list ]; then
    while read po; do
      if [ -n "$po" ] && [ -f "$po" ]; then
        transvalidate
      else
        echo -e "\n*** Sorry, there is no file named “$po” in www-$lang."
      fi
    done < ../valid-list
  else
    echo -e "\n*** Sorry, I can't find any PO to work on.
    If you use Git, please make sure that none of
    your changes has been committed or stashed."
  fi

elif [ -f "$po" ]; then
  transvalidate

else
  echo -e "\n*** Sorry, there is no file named “$po” in www-$lang."
fi

# [Git only] If valid, the POs are committed to the local repo.
if [ "$final_exit_code" = "0" ] && [ -d .git ]; then
  git add .
  if [ "$(git diff --name-only --staged)" ]; then
    [ -z "$message" ] && select_message
    if [ -z "$message" ]; then
      git commit || git_exit_code=$?
    else
      git commit -m "$message" || git_exit_code=$?
    fi
    if [ -n "$git_exit_code" ]; then  # Addition to the Git error message:
      echo -e "\n*** ... but the POs seem OK."
    else
      echo -e "\n*** Changes to branch $branch have been committed."
    fi
  fi
else
    echo -e "\n*** One (or more) of the POs need fixing.
    Your changes stay in the staging area for the time being."
fi

# Clean up.

cd ../ && rm -f fuzz-report p m add-CREDITS add-NOTES

exit $final_exit_code
