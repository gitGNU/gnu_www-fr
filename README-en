==============================================
Hassle-free method for updating POs on gnu.org
==============================================

The scripts in this directory provide an alternative to using a local
installation of GNUN.


## The update workflow

 Most of the translations on www.gnu.org use the PO system and are managed by
 GNUN, which is a set of scripts and makefiles primarily designed to run on a
 gnu.org server, in the www.gnu.org arborescence (the "www" directory, under
 version control by CVS). Some of the functionalities of GNUN are also
 available to translators if they install both GNUN and an image of www on
 their machine. GNUN even includes a few functions which are specifically
 designed for the translation teams and run from the team's repository of PO
 files (the "www-team" directory, under CVS, Git, SVN or Bzr version control).
 See https://www.gnu.org/software/trans-coord/manual/gnun/gnun.html for
 details.

 Each PO file has two copies, one in www and the other in www-team. The method
 we are describing here assumes that the modifications will only be done in
 www-team, and that www is an exact image of www.

 Ideally, the two local copies of a PO are the same, and they are complete and
 up-to-date. When an original page is modified on the server (in the www
 arborescence), the POs corresponding to its translations in different
 languages are regenerated by GNUN and their modified strings (paragraphs) are
 marked "fuzzy". Updating POs involves several steps:

 1. synchronizing the local www and www-team with their respective remote;

 2. comparing the POs in www-team with those in www to find out where the
    fuzzy and untranslated strings are, and merging the differences from www
    to www-team;

 3. completing translation of the fuzzy and untranslated strings in www-team;

 4. copying the updated POs from www-team to www;

 5. committing them to the www CVS repository and committing/pushing them to
    the www-team remote.

 Other workflows are possible when www-team is controlled by CVS, because the
 second operation can be done on the server side.

 Operations 1, 2 and 4 are typically done with a local installation of GNUN.
 However, this has proven akin to using a sledge hammer for swatting a fly.
 Thus a lighter method was sought.


## The problems involved in using GNUN locally

 * A complete working copy of the CVS www module includes nearly 20,000 files
   for a total size of 500MB. The checkout time occasionally exceeds one hour
   with a decent ADSL connexion, and update has been known to take 45min.
   [Update Sept. 2016: things have improved quite a bit after the migration to
   new hardware in May.]

 * Generating a translated page from a PO and validating both (we call it
   "transvalidation") requires the includes to be present in www/server/,
   despite the fact that the translated HTML output has unexpanded SSIs. If an
   include is missing, the page is generated with the extension "humbly-
   drafted-by-gnun" but is not validated.

 * When one of the includes is not valid HTML, the error is reported against
   the complete page (with expanded includes), but the normal output doesn't
   show it, so the translator is left pondering.

 * The links in the HTML output are relative to server root, and therefore
   cannot be checked directly.

 * The PO files are modified in www-team, but they need to be copied to www for
   transvalidation. The corresponding POT is regenerated in the process,
   thereby changing the POT creation date in both the PO and the POT. As a
   result, the changes in www must be reverted to avoid conflicts during the
   next synchronization with the www CVS repository.

 * The "format" target reformats _all_ POs in www-team, even those which have
   not been modified.

 * The "sync" target merges _all_ POs from www to www-team, whether they differ
   or not.

 To sum up: the use of GNUN involves prohibitive connection times and a
 constant shuffling around of files which, among other things, is detrimental
 to SSDs. Smartphone users, beware!


## Basic scripts

 They can be launched from the dashboard or the contextual menu and are
 somewhat interactive. The parameters can be set once and for all in a
 configuration file.

 * micro-www-checkout checks out a subset of the www directory that only
   includes the POs and corresponding original HTMLs for one or several
   languages.

 * cvs-sync synchronizes the local www directory with the CVS repository, then
   merges www to www-team and reports the status of the POs in www-team. It may
   send the list of outdated POs to the team's mailing address and commit those
   POs to the team directory.

 * transvalid-po generates an HTML page from a PO for proofreading, and
   validates both the HTML and the PO; the PO is reformatted in the process.
   This script works outside the gnu.org context, but requires the proper DTD
   (provided along with it).

 * transvalid-batch lists the modified POs, using tools provided by either Git
   or CVS, then calls transvalid-po for each of them.

 * www-commit gets lists of modified POs from the most recent Git commits,
   then, if desired, helps commit each batch to the www CVS repository.

 * check-links compares the links in translated and original strings of the
   POs in a directory. It is typically run in www-team to detect missed
   updates. This script does not require the gnu.org context.


## Additional tools

 * preview-po.pl produces a generic HTML page from a PO. The original HTML is
   not required.

 * po2pad and pad2po may be useful for initial translation of a POT, or review
   of a PO. The former prepares the POT or PO for transfer to a pad for
   collaborative translation, and the latter (re)generates the PO from the
   translated pad.
