#!/bin/bash

# NAME
#    cvs-sync - synchronization of the POs and status report

# SYNOPSIS
#    cvs-sync [OPTIONS] .../www-TEAM

# DEPENDENCIES
#    * required: cvs, msgmerge (from the gettext package);
#    * optional: git, gnun-add-fuzzy-diff (from the gnun package), mutt.

# DESCRIPTION
#    cvs-sync synchronizes the local www directory with the CVS repository
#    on gnu.org, then www-team with the local www, and reports the differences.
#
#    Method:
#    1. cvs-sync calls 'cvs update' in www.
#    2. If there are differences with www-team, it calls msgmerge to merge
#       them, and adds diffs to fuzzy strings if gnun-add-fuzzy-diff is found.
#    3. It lists the POs that need updating and the number of fuzzy or
#       untranslated strings, as well as the POs that have been modified or
#       lack a counterpart in www (possibly indicating that they are new
#       translations).
#    4. If any POs are present in www but not in www-team, they are installed
#       in www-team.
#    5. If the "-v" switch is used and a GUI or PO editor has been specified,
#       the outdated PO files are displayed (not recommended if there are too
#       many of them).
#    6. [Git repo only] After the report, and optionally the POs, have been
#       displayed, the user is prompted to send the list of outdated POs to a
#       specified address and commit them to the Git repo. This requires
#       setting the email address and subject line. The message is sent with
#       Mutt. [This could be extended to CVS repos, but the commits would be
#       irreversible.]
#
#    Requirements:
#    * www and www-team must have the same parent directory.
#    * www-team must contain the working copies of the PO files.
#    * www must contain the unmodified PO files (and the corresponding
#      originals, needed for transvalidation). The POTs are not needed.

# OPTIONS AND CURRENT SETTINGS
#    Displayed by:   cvs-sync -h
#
#    Configuration file:
#    The command-line parameters can be set once and for all in a configuration
#    file (also used by transvalid-batch, www-commit, micro-www-checkout, and
#    check-links), with the syntax:
#       parameter1="value1"
#       parameter2="value2"
#    This configuration overrides the default settings but is superseded by the
#    command line. In particular, a PO editor (e.g. gtranslator) can be
#    set with the "-g" option if the configuration specifies a normal GUI
#    editor (e.g. gedit).
#    The configuration file is defined under "Parameters".

#==============================================================================

set -e
set -o pipefail

function version () {
cat <<EOF
${0##*\/} version 0.1
Copyright (C) 2013, 2014 Thérèse Godefroy
You may redistribute this script and/or modify it under the terms
of the Creative Commons CC0 license.
EOF
}

function usage () {
cat <<EOF

Usage: cvs-sync [OPTIONS] .../www-TEAM

  The script assumes the context of www.gnu.org. It synchronizes the
  local reference directory (www) with the CVS repository, and the
  working directory (www-team) with www, then reports the status of
  the POs. www and www-team must have the same parent directory, and
  the local modifications must be made in www-team.

Options:
  -g GUI_EDITOR         [$geditor]
      Specify a GUI or PO editor. If none, POs are not displayed.

  -v  Display the outdated PO in the GUI or PO editor.

  -a TEAM@ADDRESS       [$address]
      Specify the address of the team mailing list (optional).
      The email will be sent with Mutt.

  -s "SUBJECT_LINE"     [$subject]
      Specify the path to www-team (required if not in configuration).

  -V  Display version info and exit.
  -h  Display this help and exit.

The parameters can be specified in a configuration file:
      $conf
One line per parameter, with syntax: param='VALUE'

Report bugs to <godef.th@free.fr>

EOF
}

## Parameters

conf="$HOME/.profile"
teamdir=""
geditor=""
visual=""
address=""
subject="Sync with www $(date +"%y-%m-%d")" # This could be localized.

test -s "$conf" && source $conf

# Parse the command line.
OPTIND=1
while getopts "h?Va:g:s:v" opt; do
  case "$opt" in
    h | \? ) usage; exit 0 ;;
    V ) version; exit 0 ;;
    a ) address=$OPTARG ;;
    g ) geditor=$OPTARG ;;
    s ) subject=$OPTARG ;;
    v ) visual=1 ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Make sure the dependencies are installed (.
MSGMERGE=$(which msgmerge) \
|| (echo "!!! msgmerge is not installed."; close_term 1)
MSGATTRIB=$(which msgattrib) \
|| (echo "!!! msgattrib is not installed."; close_term 1)
FUZZY_DIFF=$(which gnun-add-fuzzy-diff) \
|| echo "*** No diff will be added to the fuzzy strings because
    gnun-add-fuzzy-diff is not installed."
MUTT=$(which mutt) \
|| echo "*** No email will be sent because Mutt is not installed."


## Functions

function close_term () {
  sleep 10
  exit $1
}

function check_fuzz () {
  # Check for non-deprecated fuzzy strings.
  fuzzy=$(grep -A1 '^#, fuzzy' "$1" |
          sed '/fuzzy/ {N; s,\n,,'} |
          sed -e '/^#, fuzzy#~/d' |
          grep -c '^#, fuzzy')

  # Check for untranslated strings.
  untr=$(sed -n '/^msgstr ""[[:space:]]*$/ {N;/\n[[:space:]]*$/p}' "$1" \
       | grep -c msgstr) || true
  if test "$fuzzy" != "0" -o "$untr" != "0"; then
    return 3
  else
    return 4
  fi
}

#====================
echo "${0##*\/} - synchronization and status report"

## Team directory input

test -n "$1" && teamdir=$1
if test ! -d "$teamdir"; then
  echo -e "\n*** Please specify your team directory."; read teamdir
fi
teamdir=${teamdir%\'}; teamdir=${teamdir#\'}
# Make sure it can be reached.
cd "$teamdir" \
|| (echo 1>&2 "!!! Directory $teamdir doesn't exist."; close_term 1)
# Make the path absolute.
teamdir="$(pwd)"


## Update www.

# Make sure www can be reached,
cd ../www 2>/dev/null \
|| (echo 1>&2 "!!! $wwwdir doesn't exist or is not reachable.";
    close_term 1)
# and is a CVS work tree.
test -d CVS \
|| (echo 1>&2 "!!! $wwwdir is not a CVS directory."; close_term 1)
wwwdir="$(pwd)"

cvs update


## Sync www-team with www and report outdated and new (or misplaced) POs.

cd "$teamdir"

# For those who use Git...
if test -d ".git"; then
  # Find the current branch.
  curr_branch=$(git rev-parse --abbrev-ref HEAD)
  if [ "$curr_branch" != 'master' ]; then
    echo -e "\n!!! Please move to branch master."
    close_term 1
  fi
fi

# Create temporary files.
po_team_list=$(mktemp -t syn.XXXXXX) || close_term 1
po_www_list=$(mktemp -t syn.XXXXXX)  || close_term 1
po_www_list1=$(mktemp -t syn.XXXXXX) || close_term 1
po_www=$(mktemp -t syn.XXXXXX)       || close_term 1
po_team1=$(mktemp -t syn.XXXXXX)     || close_term 1
trap 'rm -f "$po_team_list" "$po_www_list" "$po_www_list1" "$po_www" \
            "$po_team1"' EXIT

# List the POs in www-team.
find . -name "*.po" | sort | sed '/server\/gnun\//d' > $po_team_list

# Get language code of the team.
lang="$(head -n1 $po_team_list)"
lang=${lang%.po}
lang=${lang##*.}

# List the POs in www.
find "$wwwdir" -type f -name "*.$lang.po" | \
        sed "s|$wwwdir|.|;s|po/||;/server\/gnun\//d" | sort > $po_www_list

# Delete the output of the previous run.
rm -f ../update-report ../update-list

# Build the report.
echo
while read po_team; do
  diff_test=0
  fuzz_test_www=0
  fuzz_test_team=0

  section=${po_team%/*}; section=${section#.\/}
  basename=${po_team##*/}
  po=$section/$basename

  # Test for the presence of the corresponding PO in www, then eliminate
  # trivial differences and diff the 2 versions of the PO.
  if test -s "../www/$section/po/$basename"; then
    sed 's,charset=UTF-8\\n"$,charset=utf-8\\n",' \
      "$wwwdir/$section/po/$basename" > "$po_www"
    sed 's,charset=UTF-8\\n"$,charset=utf-8\\n",' "$po_team" > "$po_team1"
    diff -uB "$po_www" "$po_team1" > /dev/null 2>&1 || diff_test=$?

    case $diff_test in
      # There is a difference: merge non-obsolete strings and add the wdiff
      # between old and new msgids.
      1 ) $MSGATTRIB --no-obsolete "$wwwdir/$section/po/$basename" > "$po_www"
          $MSGMERGE -U -q --previous "$po_team" "$po_www"
          test -n $FUZZY_DIFF && $FUZZY_DIFF -i "$po_team"
    ;;
      # There is no difference: do nothing.
      0 )
    ;;
      * ) echo "!!! $po : Error in the diff test."
    ;;
    esac

    # Test for fuzz in www and www-team.
    check_fuzz "$po_www"  || fuzz_test_www=$?
    check_fuzz "$po_team" || fuzz_test_team=$?

    case $fuzz_test_team in
      3 ) case $fuzz_test_www in
            # Fuzz in www: the PO needs updating.
            3 ) echo "$po : $fuzzy fuzzy and $untr untranslated."
               # This could be localized.
                echo "$po : $fuzzy fuzzy and $untr untranslated messages." \
                  >> ../update-report
                git add "$po" ;;
            # No fuzz in www: most likely the updated version has been
            # committed directly to www.
            4 ) cp -b $po_www $po_team ;;
            * ) echo "$po : !!! Error in the www fuzz test." ;;
          esac
    ;;
      # No fuzz in www-team
      4 ) case $fuzz_test_www in
            # Fuzz in www: the PO has been updated.
            3 ) echo "$po seems ready to post." ;;
            # No fuzz in www:
            4 ) test "$diff_test" != "0" \
                && echo "$po : versions in www and www-team differ." ;;
            * ) echo "$po : !!! Error in the www fuzz test." ;;
          esac
    ;;
      * ) echo "$po : !!! Error in the www-team fuzz test."
    ;;
    esac

  # There is no corresponding PO in www:
  else
    echo "$po : new translation or misplaced/renamed PO."
  fi


## Add missing POs to www-team.

  # If the PO is also listed in $po_www_list, remove it from that file.
  grep -v "$po" $po_www_list > $po_www_list1 || true
  mv $po_www_list1 $po_www_list
done < $po_team_list

# If any POs are left in $po_www_list, add them to www-team.
if [ -s "$po_www_list" ]; then
  echo -e "\n*** Also, the following files exist in www, but not in www-team.
    They will be added to www-team."
  while read po_www; do
    echo $po_www
    section=${po_www%/*}; section=${section#.\/}
    basename=${po_www##*/}
    install -Dm644 "$wwwdir/$section/po/$basename" "$po_www"
  done < $po_www_list
  if test -d .git; then
    git add $(< $po_www_list)
    git commit -m "Add missing POs to www-$lang." $(< $po_www_list)
  fi
fi


## Make a list of outdated POs and use it.

if [ -f ../update-report ]; then
  sed -e 's,^\./,,' -e 's, .*,,' ../update-report > ../update-list

  # Display the POs if the -v switch is used and a GUI/PO editor has been set.
  if [ "$visual" = 1 ]; then
    if [ -n $(which "$geditor") ]; then
      $geditor $(< ../update-list) &
    else
      echo -e "\n*** No valid GUI editor has been specified."
    fi
  fi

  # Optionally send the list of outdated POs to the team and commit the POs.
  # (This depends on the workflow.)
  if [ -n "$MUTT" ] && [[ "$address" == *@* ]] && [ -n "$subject" ] \
  && [ -d .git ]; then
    echo -e "\n*** Send the report to the mailing list and commit the POs?
          \"Yes\" = [Enter]    \"No\" = any other key\n"
    read -s -n1 OK
    if test -z "$OK";  then
      $MUTT -s "[cvs-sync] $subject" -i ../update-report -- $address < "."
      git add $(< ../update-list)
      git commit -m "$subject" $(< ../update-list)
    fi
  fi
else
  echo "*** No outdated PO."
fi
echo -e "\n*** Done.\n"

close_term 0
