#!/bin/bash

# NAME
#    cvs-sync - synchronization of the POs and status report

# SYNOPSIS
#    cvs-sync [-a TEAM@ADDRESS] -t /.../www-TEAM

# DEPENDENCIES
#    * required: cvs, msgmerge (from the gettext package);
#    * optional: git, gnun-add-fuzzy-diff (from the gnun package), mutt.

# DESCRIPTION
#    cvs-sync synchronizes the local www directory with the CVS repository
#    on gnu.org, then www-team with the local www, and reports the differences.
#
#    Method:
#    1. cvs-sync calls 'cvs update' in www.
#    2. If there are differences with www-team, it calls msgmerge to merge
#       them, and adds diffs to fuzzy strings if gnun-add-fuzzy-diff is found.
#    3. It lists the POs that need updating and the number of fuzzy or
#       untranslated strings, as well as the POs that have been modified or
#       lack a counterpart in www (possibly indicating that they are new
#       translations).
#    4. If a GUI editor has been set, the outdated PO files are displayed (not
#       recommended if there are too many of them).
#    5. Optionally, the outdated POs are committed to the Git repo (but not
#       pushed), and a notification is sent to a specified address.
#
#    Requirements:
#    * www and www-team must have the same parent directory.
#    * www-team must contain the working copies of the PO files.
#    * www must contain the unmodified PO files (and the corresponding
#      originals, needed for transvalidation). The POTs are not needed.

# OPTIONS AND CURRENT SETTINGS
#    Displayed by:   cvs-sync -h
#
#    Configuration file:
#    The command-line parameters can be set once and for all in a configuration
#    file (also used by transvalid-batch, www-commit, micro-www-checkout, and
#    check-links), with the syntax:
#       parameter1="value1"
#       parameter2="value2"
#    This configuration overrides the default settings but is superseded by the
#    command line. The file ($conf) is specified under "Parameters".

#==============================================================================

set -e
set -o pipefail

function version () {
cat <<EOF
${0##*\/} version 0.1
Copyright (C) 2013, 2014 Thérèse Godefroy
You may redistribute this script and/or modify it under the terms
of the Creative Commons CC0 license.
EOF
}

function usage () {
cat <<EOF

Usage: cvs-sync [-a TEAM@ADDRESS] -t /.../www-TEAM

  The script assumes the context of www.gnu.org. It synchronizes the
  local reference directory (www) with the CVS repository, and the
  working directory (www-team) with www, then reports the status of
  the POs. www and www-team must have the same parent directory, and
  the local modifications must be made in www-team.

Options:

  -t /.../www-TEAM      [$teamdir]
      Specify the absolute path to www-team (required)
  -g GUI_EDITOR         [$geditor]
      Specify a GUI or PO editor. If none, POs are not displayed.
  -a TEAM@ADDRESS       [$address]
      Specify the address of the team mailing list (optional)
  -V  Display version info and exit.
  -h  Display this help and exit.

The parameters can be specified in a configuration file:
      $conf
One line per parameter, with syntax: param='VALUE'

Report bugs to <godef.th@free.fr>

EOF
}

function close_term () {
  sleep 10
  exit $1
}


echo "${0##*\/} - synchronization and status report"


## Parameters

conf="$HOME/.profile"
teamdir=""
geditor=""
address=""
subject="Outdated POs $(date +"%y-%m-%d")" # This could be localized.

test -s "$conf" && source $conf

# Parse the command line.
OPTIND=1
while getopts "h?Va:g:t:" opt; do
  case "$opt" in
    h | \? ) usage; exit 0 ;;
    V ) version; exit 0 ;;
    a ) address=$OPTARG ;;
    g ) geditor=$OPTARG ;;
    t ) teamdir=$OPTARG ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Test for the existence of www and www-team.
if test ! -d "$teamdir"; then
  echo -e "\n*** Please specify your working directory (www-team)."; read teamdir
  teamdir=${teamdir%\'}; teamdir=${teamdir#\'}
fi
cd $teamdir \
|| (echo 1>&2 "!!! Directory $teamdir doesn't exist."; close_term 1)

wwwdir=${teamdir%\/*}/www   # Path to www
cd $wwwdir 2> /dev/null \
|| (echo 1>&2 "!!! Directory www doesn't exist."; close_term 1)


## Update www.

cvs update
cd $teamdir

## For those who use Git...

if test -d ".git"; then
  # Find out the current branch.
  curr_branch=$(git rev-parse --abbrev-ref HEAD)
  if [ "$curr_branch" != 'master' ]; then
    echo -e "\n!!! Please move to branch master."
    close_term 1
  fi
fi


## Sync www-team with www and report outdated and new (or misplaced) POs.

function check_fuzz () {
  # Check for fuzzy strings.
  fuzzy=$(grep -c '^#, fuzzy' $1) || true
  # Check for untranslated strings.
  untr=$(sed -n '/^msgstr ""[[:space:]]*$/ {N;/\n[[:space:]]*$/p}' $1 \
       | grep -c msgstr) || true
  if test "$fuzzy" != "0" -o "$untr" != "0"; then
    return 3
  else
    return 4
  fi
}

MSGMERGE=$(which msgmerge) \
|| (echo "!!! msgmerge is not installed."; close_term 1)
MSGATTRIB=$(which msgattrib) \
|| (echo "!!! msgattrib is not installed."; close_term 1)
FUZZY_DIFF=$(which gnun-add-fuzzy-diff) \
|| echo "*** No diff will be added to the fuzzy strings because
    gnun-add-fuzzy-diff is not installed."

po_list=$(mktemp -t syn.XXXXXX)  || exit 1
po_www=$(mktemp -t syn.XXXXXX)   || exit 1
po_team1=$(mktemp -t syn.XXXXXX) || exit 1
trap 'rm -f "$po_list" "$po_www" "$po_team1"' EXIT

echo ""
find . -name "*.po" | sort | sed '/server\/gnun\//d' > $po_list

# Make sure the update list doesn't exist.
rm -f ../update-report ../update-list

while read po_team; do
  diff_test=0
  fuzz_test_www=0
  fuzz_test_team=0

  section=${po_team%/*}; section=${section#.\/}
  basename=${po_team##*/}
  po=$section/$basename

  # Test for the presence of the corresponding PO in www, then eliminate
  # trivial differences and diff the 2 versions of the PO.
  if test -s "../www/$section/po/$basename"; then
    sed 's,charset=UTF-8\\n"$,charset=utf-8\\n",' \
      $wwwdir/$section/po/$basename > $po_www
    sed 's,charset=UTF-8\\n"$,charset=utf-8\\n",' $po_team > $po_team1
    diff -uB $po_www $po_team1 > /dev/null 2>&1 || diff_test=$?

    case $diff_test in
      # There is a difference: merge non-obsolete strings and add the wdiff
      # between old and new msgids.
      1 ) $MSGATTRIB --no-obsolete $wwwdir/$section/po/$basename > $po_www
          $MSGMERGE -U -q --previous $po_team $po_www
          test -n $FUZZY_DIFF && $FUZZY_DIFF -i $po_team
    ;;
      # There is no difference: do nothing.
      0 )
    ;;
      * ) echo "!!! $po : Error in the diff test."
    ;;
    esac

    # Test for fuzz in www and www-team.
    check_fuzz $po_www  || fuzz_test_www=$?
    check_fuzz $po_team || fuzz_test_team=$?

    case $fuzz_test_team in
      3 ) echo "$po : $fuzzy fuzzy and $untr untranslated."
          # This could be localized.
          echo "$po : $fuzzy fuzzy and $untr untranslated messages." \
            >> ../update-report
          git add $po
    ;;
      # No fuzz in www-team
      4 ) case $fuzz_test_www in
            # Fuzz in www: the PO has been updated.
            3 ) echo "$po seems ready to post." ;;
            # No fuzz in www:
            4 ) test "$diff_test" != "0" \
                && echo "$po : versions in www and www-team differ." ;;
            * ) echo "$po : !!! Error in the www fuzz test." ;;
          esac
    ;;
      * ) echo "$po : !!! Error in the www-team fuzz test."
    ;;
    esac

  # There is no corresponding PO in www:
  else
    echo "$po : new translation or misplaced/renamed PO."
  fi
done < $po_list

if [ -f ../update-report ]; then
  sed -e 's,^\./,,' -e 's, .*,,' ../update-report > ../update-list
  # Display the POs if a GUI editor has been set.
  if test $(which "$geditor"); then
    $geditor $(< ../update-list) &
  else
    echo "*** No valid editor has been specified."
  fi
  # Decide whether to send the report to the mailing list and commit the
  # outdated POs, or update the POs right away.
  echo -e "\n*** Commit the list?
          \"Yes\" = [Enter]    \"No\" = any other key\n"
  read -s -n1 OK
  if test -z "$OK"; then
    if [[ "$address" == *@* ]] && [ -n "$subject" ]; then
      mutt -s "[cvs-sync] $subject" \
           -i ../update-report -- $address < "."
    fi
    git commit -m "$subject" $(< ../update-list) || close_term $?
  else
    echo "    No commit."
  fi
fi

close_term 0
