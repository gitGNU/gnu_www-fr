#!/bin/bash

# NAME
#    check-links - compare links in translated and original strings of POs

# SYNOPSIS
#       check-links [OPTIONS] PO_FILE
#       or
#       check-links [OPTIONS] .../www-TEAM
#       or
#       check-links [OPTIONS] -l LANG [.../DIRECTORY]

# DEPENDENCY
#    * optional: meld.

# DESCRIPTION
#    check-links processes either one PO, or all the POs for one language in
#    the working directory. It collects the href attributes, and shows
#    differences between msgid and msgstr.

#    The script can be launched from the contextual menu of either a PO file
#    or a directory. It can also be run without argument, in which case it
#    processes POs in the current directory.

#    Method:
#    * remove comments before msgid, keeping the fuzzy tags;
#    * unwrap messages;
#    * select non-deprecated strings that contain links, except when there are
#      systematic differences between msgid and msgstr.
#    * process msgid and msgstr together:
#      - isolate links (after href=", and before the following double-quote);
#      - remove what is mostly specific to msgstr, such as #TransNote*,
#        #sommaire, *-rev, etc. (this can be commented out);
#      - save the link collections for msgid and msgstr separately, along
#        with string numbers and fuzzy tags.
#    * make a diff and optionally display it, or look at the differences with
#      Meld.

# OPTIONS AND CURRENT SETTINGS
#    Displayed by:   check-links -h

#    Configuration file:
#    The command-line parameters can be set once and for all in a configuration
#    file (also used by transvalid-batch, www-commit, micro-www-checkout, and
#    cvs-sync), with the syntax:
#       parameter1="value1"
#       parameter2="value2"
#    This configuration overrides the default settings but is superseded by the
#    command line. The file ($conf) is specified under "Parameters".

#==============================================================================

set -e
set -o pipefail

function version () {
cat <<EOF
${0##*\/} version 0.2
Copyright (C) 2013 Denis Barbier
              2013, 2016 Thérèse Godefroy
You may redistribute this script and/or modify it under the terms of the
Creative Commons CC0 license
EOF
}

function usage () {
cat <<EOF
${0##*\/} - compare links in translated and original strings of POs

Usage: check-links [OPTIONS] PO_FILE
       or
       check-links [OPTIONS] .../www-TEAM
       or
       check-links [OPTIONS] -l LANG [.../DIRECTORY]

  The script processes either one PO, or all the POs in the specified
  directory (or in the current one if none has been entered). If this is a
  standard www-team, its language overrides whatever language has been
  defined otherwise.
  All the links are selected (including anchors and email addresses), and
  differences between the original document and its translation are shown
  either as a standard diff (optionally displayed in a GUI editor) or with
  Meld (if installed).

Options:
  -l LANG               [$lang]
      Specify the language code if no PO file is specified.

  -g GUI_EDITOR         [$geditor]
      Specify a GUI editor, preferably with syntax highlighting (optional).

  -v [0, 1 or 2]        [$visual]
      Sets the method for displaying differences:
      -v 0  make a diff and only say where it is (default).
      -v 1  make a diff and display it in the GUI editor, if available.
      -v 2  display the differences with Meld, if available.

  -V  Display version info and exit
  -h  Display this help and exit

  The parameter values can be set in a configuration file:
       $conf
  One line per parameter, with syntax: param='VALUE'
  The command line overrides those settings.
  The language code can also be entered at the prompt.

Report bugs to <godef.th@free.fr>

EOF
}

## Parameters

conf="$HOME/.profile"
geditor=""
lang=""
visual=0

test -s "$conf" && source $conf

# Parse the command line.
OPTIND=1
while getopts "h?Vl:g:v:" opt; do
  case "$opt" in
     h | \? ) usage; exit 0 ;;
     V ) version; exit 0 ;;
     l ) lang=$OPTARG ;;
     g ) geditor=$OPTARG ;;
     v ) visual=$OPTARG ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift


function close_term () {
  sleep 5
  exit $1
}

function isolate_links () {
  awk '
    BEGIN {
      RS = "\n\n"
      FS = "\n"
      OFS= "\t"
    }
    {
      gsub ( /^#.*\n#, fuzzy.*\nmsgid/ , "Fmsgid" )
      gsub ( /^#.*\nmsgid/ , "msgid" )
      gsub ( /"\n"/ , "" )
      gsub ( /\\"/ , "\"" )
      gsub ( /[ \t]*/ , "" )
      if ( FNR == 1 )
      {
        print "\n=================================================\n" > "href-id"
        print "\n""*** " FILENAME "\n" > "href-str"
      }
      if ( /href="/ &&
           !/^#/ &&
           !/GNUN-SLOT:/ &&
           !/msgid"Pleaseseethe<ahref="\/server\/standards\/README/ &&
           !/msgid"Thispageislicensed.*\/licenses\/by-nd\/3.0\/us/  &&
           !/msgid"Thispageislicensed.*\/licenses\/by-nd\/4.0\// )
      {
        gsub ( /href="#TransNote[^"]+"/ , "" )  # )
        gsub ( /href="[^"]+-rev"/ , "" )        # )
        gsub ( /href="#TOC[^"]*"/ , "" )        # ) Remove
        gsub ( /href="#tm"/ , "" )              # ) translation-specific
        gsub ( /href="#t[0-9]{4}"/ , "" )       # ) anchors.
        gsub ( /href="#sommaire"/ , "" )        # )
        gsub ( /href="#tfn?[0-9]+"/ , "" )      # )
        gsub ( /href="#ft[0-9]+"/ , "" )        # )
        gsub ( /href="[^"]*/ , "& " )  # Mark the ends of URLs.
        gsub ( /^[^ ]+$/ , "" )        # Remove strings with no URL anywhere.
        gsub ( / [^ ]+$/ , "" )        # Strip end of msgstr or complete msgstr if no URL.
        gsub ( /msg(id|str)/ , " &" )  # Mark beginning of msg(id|str).
        gsub ( /^F\n / , "" )
        gsub ( / [^ ]+href="/ , " " )  # Strip beginning of msg* & between URLs.
        gsub ( / [^ ]+\n / , "\n " )   # Strip end of msgid or complete msgid if no URL.
        sub  ( / / , "*" , $1 ) ; sub ( / / , "*" , $2 )
        gsub ( / / , "\n\t\t" , $1 ) ; gsub ( / / , "\n\t\t" , $2 )
        sub  ( /*/ , "\t" , $1 ) ; gsub ( /*/ , "\t" , $2 )
        print FNR-1 , $1 > "href-id"; print FNR-1 , $2 > "href-str"
      }
    }
    END {
      print "\n=================================================\n" > "href-id"
      print "\n" > "href-str"
    }' $(<list)
}

function show_differences () {
  if [ "$visual" = "2" ] && [ -n $(which meld) ]; then
    # Look at the diff with Meld.
      meld href-id href-str

  else
    # Make a standard diff.
    diff -U1 href-id href-str > $1 || true
    # Make the output more compact.
    sed -i -e '/^ $/d' -e 's,^+\*\*\*,***,' -e 's,^@@.*$,,' $1
    sed -i -e '/^$/ {N; s,\n-===,====,}' -e 's,^-===,====,' $1

    # Optionally display the diff in the GUI editor, if available.
    if [ -n "$geditor" ] && [ -n $(which "$geditor") ] && [ "$visual" = 1 ]
      then
      $geditor $1 &
    else
      echo "    The diff is $1."
    fi
  fi
  rm -f list href-id href-str
}

#====================

input=$1
input=${input#\'}; po=${input%\'}

## Input

# Single PO,
if [ -f "$input" ]; then
  if [ "${input%.po}" != "$input" ]; then
    echo "*** Input file: $input"
    echo $input > list
    output="$input-href.diff"
  else
    echo "!!! This is not a PO."
    close_term 1
  fi


# or directory (current dir by default).
elif [ -d "$input" ] || [ -z "$input" ]; then
  # If a directory has been entered, try to work there.
  if [ -d "$input" ]; then
    cd "$input" 2>/dev/null ||
    (echo "*** Unable to move to the specified directory."; close_term 1)
  fi

  # Assume this is a standard team directory; try to guess the language code.
  dir="$(pwd)"
  echo "*** Working directory: $dir"
  if [ "${dir##*/www-}" != "$dir" ]; then
    lang=${dir##*/www-}
    lang=${lang%%/*}
  fi

  if test -z "$lang"; then
    echo "*** Please enter a language code, or hit Enter to quit."
    read lang
    test -z "$lang" && exit 0
  fi
  output=$(pwd)/href-$lang.diff

  # List POs for the specified language in the working directory,
  # skipping includes and sitemap.
  find * -name "*.$lang.po" | sort |
  awk '{ if (!/planetfeeds/      && !/compendia/  && !/sitemap/      &&
             !/-include-(1|2)\./ && !/-menu\./    && !/footer-text/  &&
             !/bottom-notes/     && !/outdated\./ && !/top-addendum/ &&
             !/fs-gang/)
         { print }
       }' > list
else
  echo "!!! This file doesn't exist."
  exit 1
fi


## Isolate and compare links.

if test -s list; then
  isolate_links
  show_differences $output
else
  echo 1>&2 "!!! No PO to work on."
  close_term 1
fi
exit 0
