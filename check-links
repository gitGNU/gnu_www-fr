#!/bin/bash

# NAME
#    check-links - compare links in translated and original strings of POs

# SYNOPSIS
#       check-links [OPTIONS] PO_FILE
#       or
#       check-links [OPTIONS] .../www-TEAM
#       or
#       check-links [OPTIONS] -l LANG [.../DIRECTORY]

# DEPENDENCY
#    * optional: meld.

# DESCRIPTION
#    check-links processes either one PO, or all the POs is the working
#    directory. It selects all the links (including anchors and email
#    addresses), and shows differences between the original document and its
#    translation.

#    Method:
#    * remove comments;
#    * unwrap messages;
#    * remove footer strings that contain localized or customized links.
#    * process msgid and msgstr together:
#      - isolate links (after href=", and before the following double-quote);
#      - remove what is specific to msgstr, such as #TransNote*, #sommaire,
#        *-rev, etc. (this can be commented out);
#      - save the link collections for msgid and msgstr separately, along
#        with string numbers and fuzzy tags.
#    * make a diff and optionally display it, or look at the differences with
#      Meld.

# OPTIONS AND CURRENT SETTINGS
#    Displayed by:   check-links -h
#
#    Configuration file:
#    The command-line parameters can be set once and for all in a configuration
#    file (also used by transvalid-batch, www-commit, micro-www-checkout, and
#    cvs-sync), with the syntax:
#       parameter1="value1"
#       parameter2="value2"
#    This configuration overrides the default settings but is superseded by the
#    command line. The file ($conf) is specified under "Parameters".

#==============================================================================

set -e
set -o pipefail

function version () {
cat <<EOF
${0##*\/} version 0.2
Copyright (C) 2013 Denis Barbier
              2013, 2016 Thérèse Godefroy
You may redistribute this script and/or modify it under the terms of the
Creative Commons CC0 license
EOF
}

function usage () {
cat <<EOF
${0##*\/} - compare links in translated and original strings of POs

Usage: check-links [OPTIONS] PO_FILE
       or
       check-links [OPTIONS] .../www-TEAM
       or
       check-links [OPTIONS] -l LANG [.../DIRECTORY]

  The script processes either one PO, or all the POs in the specified
  directory (or in the current one if none has been entered). If this is a
  standard www-team, its language overrides whatever language has been
  defined otherwise.
  All the links are selected (including anchors and email addresses), and
  differences between the original document and its translation are shown,
  both as a standard diff (optionally displayed in a GUI editor), and with
  Meld (if installed).

Options:
  -l LANG               [$lang]
      Specify the language code if no PO file is specified.

  -g GUI_EDITOR         [$geditor]
      Specify a GUI editor, preferably with syntax highlighting (optional).

  -v  Show differences in the GUI editor.

  -V  Display version info and exit
  -h  Display this help and exit

  The parameter values can be set in a configuration file:
       $conf
  One line per parameter, with syntax: param='VALUE'
  The command line overrides those settings.
  The language code can also be entered at the prompt.

Report bugs to <godef.th@free.fr>

EOF
}

## Parameters

conf="$HOME/.profile"
geditor=""
lang=""
visual=""

test -s "$conf" && source $conf

# Parse the command line.
OPTIND=1
while getopts "h?Vl:g:v" opt; do
  case "$opt" in
     h | \? ) usage; exit 0 ;;
     V ) version; exit 0 ;;
     l ) lang=$OPTARG ;;
     g ) geditor=$OPTARG ;;
     v ) visual=1 ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift


function close_term () {
  sleep 10
  exit $1
}

function isolate_links () {
  awk '
    BEGIN {
      RS = "\n\n"
      FS = "\n"
      OFS= "\t"
    }
    {
      gsub ( /^#.*\n#, fuzzy.*\nmsgid/ , "Fmsgid" )
      gsub ( /^#.*\nmsgid/ , "msgid" )
      gsub ( /"\n"/ , "" )
      gsub ( /\\"/ , "\"" )
      gsub ( /[ \t]*/ , "" )
      if ( FNR == 1 )
      {
        print "\n=================================================\n" > "href-id"
        print "\n""*** " FILENAME "\n" > "href-str"
      }
      if ( /href="/ &&
           !/^#/ &&
           !/GNUN-SLOT:/ &&
           !/msgid"Pleaseseethe<ahref="\/server\/standards\/README/ &&
           !/msgid"Thispageislicensed.*\/licenses\/by-nd\/3.0\/us/  &&
           !/msgid"Thispageislicensed.*\/licenses\/by-nd\/4.0\// )
      {
        gsub ( /href="#TransNote[^"]+"/ , "" )  # )
        gsub ( /href="[^"]+-rev"/ , "" )        # )
        gsub ( /href="#TOC[^"]*"/ , "" )        # ) Remove
        gsub ( /href="#tm"/ , "" )              # ) translation-specific
        gsub ( /href="#t[0-9]{4}"/ , "" )       # ) anchors.
        gsub ( /href="#sommaire"/ , "" )        # )
        gsub ( /href="#tfn?[0-9]+"/ , "" )      # )
        gsub ( /href="#ft[0-9]+"/ , "" )        # )
        gsub ( /href="[^"]*/ , "& " )  # Mark the ends of URLs.
        gsub ( /^[^ ]+$/ , "" )        # Remove strings with no URL anywhere.
        gsub ( / [^ ]+$/ , "" )        # Strip end of msgstr or complete msgstr if no URL.
        gsub ( /msg(id|str)/ , " &" )  # Mark beginning of msg(id|str).
        gsub ( /^F\n / , "" )
        gsub ( / [^ ]+href="/ , " " )  # Strip beginning of msg* & between URLs.
        gsub ( / [^ ]+\n / , "\n " )   # Strip end of msgid or complete msgid if no URL.
        sub  ( / / , "*" , $1 ) ; sub ( / / , "*" , $2 )
        gsub ( / / , "\n\t\t" , $1 ) ; gsub ( / / , "\n\t\t" , $2 )
        sub  ( /*/ , "\t" , $1 ) ; gsub ( /*/ , "\t" , $2 )
        print FNR-1 , $1 > "href-id"; print FNR-1 , $2 > "href-str"
      }
    }
    END {
      print "\n=================================================\n" > "href-id"
      print "\n" > "href-str"
    }' $(<list)
}

#====================

## Input

# Single PO
input=$1
input=${input#\'}; po=${input%\'}
echo "Check links in $input"
if [ -f "$input" ] && [ -s "$input" ] && [ "${input%.po}" != "$input" ]; then
  echo $input > list
  output="$input-href.diff"

# or whole directory.
else
  # If a directory has been entered, try to work there.
  if test -d "$input"; then
    cd "$input" 2>/dev/null \
    || (echo "*** Unable to move to the specified directory."; close_term 1)
  fi

  # Assume this is a standard team directory; try to guess the language code.
  dir="$(pwd)"
  if [ "${dir##*/www-}" != "$dir" ]; then
    lang=${dir##*/www-}
    lang=${lang%%/*}
  fi

  if test -z "$lang"; then
    echo "*** Please enter a language code, or hit Enter to quit."
    read lang
    test -z "$lang" && exit 0
  fi
  output=href-$lang.diff

  # List POs for the specified language in the working directory,
  # skipping includes and sitemap.
  find * -name "*.$lang.po" | sort |
  awk '{ if (!/planetfeeds/      && !/compendia/  && !/sitemap/      &&
             !/-include-(1|2)\./ && !/-menu\./    && !/footer-text/  &&
             !/bottom-notes/     && !/outdated\./ && !/top-addendum/ &&
             !/fs-gang/)
         { print }
       }' > list
fi

## Isolate and compare links.

if test -s list; then
  isolate_links
  diff -U1 href-id href-str > $output || true
  # Make the output more compact.
  sed -i -e '/^ $/d' -e 's,^+\*\*\*,***,' -e 's,^@@.*$,,' $output
  sed -i -e '/^$/ {N; s,\n-===,====,}' -e 's,^-===,====,' $output

  if [ -n $(which "$geditor") ] && [ "$visual" = 1 ]; then
    $geditor $output &
  else
    echo -e "\n*** The diff file is $output."
  fi

  # Look at the diff with meld
  if [ -n $(which meld) ] ; then
    meld href-id href-str
  fi

else
  echo 1>&2 "!!! No PO to work on."
  close_term 1
fi

rm -f list href-id href-str
exit 0
