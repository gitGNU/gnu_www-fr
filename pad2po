#!/bin/bash

# NAME
#    pad2po - Pad to PO converter

# SYNOPSIS
#    pad2po [-g GUI_EDITOR] /PATH/TO/FrEn-NAME.txt

# DESCRIPTION
#    This script converts a translated pad created with po2pad into a gnu.org
#    PO file, and fills the PO header with generic data (charset, encoding,
#    language, team address).

# DEPENDENCY
#    GNU sed: only version of sed that will match the first occurrence of an
#    empty msgstr with the address: 0,/^msgstr \"\"/

# REQUIREMENTS
#    * The pad must have been created by po2pad.
#    * The working directory (wdir) is $HOME/pad. This can  be  changed  by
#      modifying one line in the script.
#    * NAME.pot must be in wdir (po2pad normally puts it there).
#    * No  blank line between an original paragraph and its translation, or
#      between the string or link label and the original; but the translation
#      may be blank.
#    * No LF inside paragraphs!
#    * At least 2 LFs after the last link.

# OUTPUT, WARNINGS and ERRORS
#    NAME.fr.po and possibly NAME.warn are created in the working
#    directory. The exit code is 1 if the input file does not have the .txt
#    extension or is empty, 2 if there are warnings, 0 otherwise.

# HOWTO
#    1. Export the translated pad as plain text.
#    2. Launch the script.
#    3. Add the translator's notes by hand, if any.
#    4. Finish up in the PO editor.

# Report bugs to godef.th@free.fr

#==============================================================================

wdir=$HOME/pad

set -e
mkdir -p $wdir

function version () {
cat <<EOF
${0##*\/} version 0.11
Copyright (C) 2013, 2015, 2016 Whoever
You may redistribute this script and/or modify it under the terms
of the Creative Commons CC0 license.
EOF
}

function usage () {
cat <<EOF

Usage: po2pad [-g GUI_EDITOR] /PATH/TO/FrEn-NAME.txt
  This script converts a translated pad created with po2pad (with link
  extraction) into a gnu.org PO file, and fills the PO header with
  generic data.

Options:
  -V  Display version info and exit.
  -h  Display this help and exit.
  -g  Specify the GUI editor (optional)

Report bugs to <godef.th@free.fr>

EOF
}


## Parameters

# Specify the editor for displaying the translated PO.
if [ -f /usr/bin/kwrite ]; then
  geditor=kwrite
elif [ -f /usr/bin/gedit ]; then
  geditor=gedit
elif [ -f /usr/bin/emacs ]; then
  geditor=emacs
else
  geditor=vi
fi

# Parse the command line.
OPTIND=1
while getopts "h?Ve:" opt; do
  case "$opt" in
    h | \? ) usage; exit 0 ;;
    V ) version; exit 0 ;;
    g ) geditor=$OPTARG ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift


echo -e "${0##*\/} - Conversion d'un pad en fichier PO\n"


## File input

  # 1. via the Nautilus script (new_txt is already set),

  # 2. via the application launcher of the contextual menu or the command line,
input=$1
if [ -z "$new_txt" ]; then
  new_txt=$input
fi
if [ -n "$new_txt" ]; then
  echo "*** Fichier TXT à convertir : $new_txt"
else

  # 3. via the application menu (drag-and-drop the file or enter it directly).
  echo "*** Quel est le fichier TXT à convertir ?"
  read new_txt
fi


## Preliminaries

# Clean up the input to get the full path, and extract the name of the
# document.
path=${new_txt//\'/}
file=${path##*/}
name=${file%.txt}

# Create temporary files.
TMP1=$(mktemp -t pad2po.XXXXXX) || exit 1 # Pad
TMP2=$(mktemp -t pad2po.XXXXXX) || exit 1 # Translated strings / header
TMP3=$(mktemp -t pad2po.XXXXXX) || exit 1 # POT content -> PO content
TMP4=$(mktemp -t pad2po.XXXXXX) || exit 1 # Pad content / processed tr. strings
TMP5=$(mktemp -t pad2po.XXXXXX) || exit 1 # Links
trap 'rm -f "$TMP1" "$TMP2" "$TMP3" "$TMP4" "$TMP5"' EXIT

# Check for non-zero content and txt extension.
if [ -n "$path" -a "$name" != "$file" ]; then
  name=${name#EnFr-}
  exit_code=0

  # Make a working copy of the translated pad.
  cp $path $TMP1
  # Make "\" and "&" inocuous.
  sed -i -e 's,\\,!!ESC!!,g' \
         -e 's,&,!!AMP!!,g' $TMP1


## Link insertion

  # Put the links aside.
  sed -n '/<lnk no./,$ p' $TMP1 > $TMP5

  # If indeed there are links,
  if [ -s $TMP5 ]; then
    # Remove the string number (if created by html2pad).
    sed -i 's,^#[0-9]\+~,,' $TMP5
    # remove the original strings,
    sed -i -e '/<lnk no./ {N;N; s,^\(<lnk no.[0-9]\+>\)\n.*\n\(.\+\)$,\1\2,}' \
           -e '/<lnk no./ {N; s,^\(<lnk no.[0-9]\+>\)\n\(.\+$\),\1\2,}' $TMP5

    # and insert the translated links (if any) where they belong.
    i=1
    while link=$(grep "<lnk no.$i>" $TMP5) ; do
      sed -i "s|<a {$i}|<a $link|" $TMP1
      i=$(( i + 1 ))
    done
    # Remove the link numbers and the list of links from the text.
    sed -i -e '/^<lnk no./,$ d' \
           -e 's,<lnk no\.[0-9]\+>,,g' $TMP1
    # Remove the link numbers and the list of links from the text.
    sed -i -e '/^<lnk no./,$ d' \
           -e 's,<lnk no\.[0-9]\+>,,g' $TMP1
  fi


## String replacement

  cp $wdir/$name.pot $TMP3

  # Select the pad contents.
  grep -A2 "^#\. type: " $TMP1 > $TMP2  || true
  # Print the translated strings: one line out of 4, starting at line 3.
  # Why 4? That's because grep -A2 adds a separator line.
  sed -n '3~4'p $TMP2 > $TMP4
  # Add 1 blank line to allow for the msgid/msgstr of the PO header.
  sed -i '1 s,^,\n,' $TMP4

  if grep "[[:print:]]" $TMP4 > /dev/null ; then

    # Initialize warnings.
    exit_code=0
    rm -f $wdir/$name.warn

    # Start a counter for the strings.
    n=0

    # Replace pot msgstr's with pad msgstr's.
    while read translation; do
      sed_exit_code=0

      if [[ -z "$translation" && "$n" != 0 ]]; then
        echo "La chaîne $n n'a pas été traduite." >> $wdir/$name.warn \
        && exit_code=2
      fi

      # Check for possible fuzzy strings (containing § or |).
      if [[ "$translation" = *§*§* ]]; then
         echo "Il reste probablement une incertitude
    délimitée par \"§\" dans la chaîne $n." >> $wdir/$name.warn \
         && exit_code=2
      fi
      if [[ "$translation" =~ '|' ]]; then
        echo "Il reste un choix à faire dans la chaîne $n
    (options séparées par \"|\")." >> $wdir/$name.warn && exit_code=2
      fi

      # Replace pot msgstr's with translated strings, identified by a number.
      sed -i "0, /^msgstr \"\"/ s||$n $translation|" $TMP3 \
      2>/dev/null || sed_exit_code=$?

      # Sed gives an error when it sees a vertical bar in the text. In this
      # case, replace with the string number only.
      if (( "$sed_exit_code" == 1 )); then
        sed -i "0, /^msgstr \"\"/ s||$n |" $TMP3
        echo "La chaîne $n n'a pas pu être insérée." >> $wdir/$name.warn \
        && exit_code=2
      fi
      let n=n+1

    done < $TMP4


## Post-processing

    # Replace the numbers with "msgstr", restore the "\" and "&", and add
    # double-quote delimiters.
    sed -i -e 's,^[0-9]\+ ,msgstr ,' \
           -e '/^msgstr/ s,!!ESC!!,\\,g' \
           -e '/^msgstr/ s,!!AMP!!,\&,g' \
           -e 's,^msgstr \(.*\)$,msgstr "\1",' \
    $TMP3

    # Substitute generic data in the POT header (this doesn't affect the PO if
    # the header is correct).
    sed -i -e 's,charset=CHARSET,charset=utf-8,' \
           -e 's,Encoding: ENCODING,Encoding: 8bit,' \
           -e 's,^"Language: ,"Language: fr,' \
           -e 's,LANGUAGE <LL@li.org>,French <trad-gnu@april.org>,' \
           -e 's,^# LANGUAGE translation,# French translation,' \
           -e "s,# Copyright (C) YEAR,# Copyright (C) $(date +'%Y')," \
    $TMP3

    # Save the PO, and display it along with the warning messages.
    mv $TMP3 $wdir/$name.fr.po
    $geditor $wdir/$name.fr.po $wdir/$name.warn


## Wrong file

  else
    echo "!!! Le pad ne semble pas avoir été traduit du tout."
    echo "    Valider pour fermer le terminal."
    read
    exit 2
  fi

else
  echo "!!! Ce n'est pas un fichier TXT, ou bien il est vide."
  echo "    Valider pour fermer le terminal."
  read
  exit 1
fi

exit $exit_code
