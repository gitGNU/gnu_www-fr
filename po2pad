#!/bin/bash

# NAME
#    po2pad - PO to pad converter

# SYNOPSIS
#    po2pad [-g GUI_EDITOR] /PATH/TO/NAME.po*

# DESCRIPTION
#    This script removes some features of a PO* file (either POT or partially
#    translated PO) to make it suitable for the translation pad. It is somewhat
#    interactive and can be launched from the application and contextual menus
#    of GNOME or KDE.

# REQUIREMENTS
#    * The working directory (wdir) is $HOME/pad. This can be changed by
#      modifying one line in the script.
#    * If a pad header is used, it must be in the working directory. Its
#      name should be "pad-header-gnu".

# OUTPUT, WARNINGS and ERRORS
#    Two files are created in the working directory:
#    * NAME.pot, the template for insertion of the translated strings by
#      if created from a partially translated PO, NAME.pot retains
#      the header and comments.
#    * NAME.pad, a plain text file which can be copied directly to the pad
#      page. The first line specifies the name of the pad.
#    The exit code is 1 if the input file doesn't have a .po* extension or
#    is empty, 0 otherwise.

# Report bugs to godef.th@free.fr

#==============================================================================

wdir=$HOME/pad

set -e
mkdir -p $wdir

function version () {
cat <<EOF
${0##*\/} version 0.11
Copyright (C) 2013, 2015 Whoever
You may redistribute this script and/or modify it under the terms
of the Creative Commons CC0 license.
EOF
}

function usage () {
cat <<EOF

Usage: po2pad [-g GUI_EDITOR] /PATH/TO/NAME.txt
  This script removes some of the features of a PO* file to make it
  suitable for the translation pad.

Options:
  -V  Display version info and exit.
  -h  Display this help and exit.
  -g  Specify the GUI editor (optional)

Report bugs to <godef.th@free.fr>

EOF
}


## Parameters

# Choose an editor for displaying the translated PO.
if [ -f /usr/bin/kwrite ]; then
  geditor=kwrite
elif [ -f /usr/bin/gedit ]; then
  geditor=gedit
elif [ -f /usr/bin/emacs ]; then
  geditor=emacs
else
  geditor=vi
fi

# Parse the command line.
OPTIND=1
while getopts "h?V" opt; do
  case "$opt" in
    h | \? ) usage; exit 0 ;;
    V ) version; exit 0 ;;
    g ) geditor=$OPTARG ;;
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift


echo -e "${0##*\/} - Préparation d'une page HTML pour le pad de traduction\n"


## File input

  # 1. via the Nautilus script (new_pot is already set)

  # 2. via the application launcher of the contextual menu or the command line,
input=$1
if [ -z "$new_pot" ]; then
  new_pot=$input
fi
if [ -n "$new_pot" ]; then
  echo "*** Fichier PO/POT à convertir : $new_pot"
else

  # 3. via the application menu (drag-and-drop the file or enter it directly).
  echo "*** Quel est le fichier PO/POT à convertir ?"
  read new_pot
fi


## Preliminaries

# Clean up the input to get the full path, and extract the name of the
# document.
path=${new_pot//\'/}
file=${path##*/}
name=${file%.po*}

# Get the URL of the original page from the header.
url=$(grep ' translation of https\?://www.gnu.org/' $path | \
      sed 's,^# .* translation of ,,')

# Create temporary files (same numbering as in html2pad).
TMP1=$(mktemp -t po2pad.XXXXXX) || exit 1 # PO* content -> pad content
TMP2=$(mktemp -t po2pad.XXXXXX) || exit 1 # Interm. in link processing
TMP3=$(mktemp -t po2pad.XXXXXX) || exit 1 # Interm. in link processing
trap 'rm -f "$TMP1" "$TMP2" "$TMP3"' EXIT

# Check for non-zero content and .po* extension.
if [ "$name" != "$file" -a -n "$path" ]; then


## Contents extraction

  # Unwrap.
  sed ':egin /^#. type:/ {N; s,"\n",,; begin}' $path > $TMP1
  # Remove the translation to create a POT with the PO header.
  sed 's,^msgstr .*,msgstr "",' $TMP1 > $wdir/$name.pot
  # Select contents.
  sed -n -i '/^#\. type: Content of: <title>/,/TRANSLATORS: Use space /p' $TMP1
  sed -i '/TRANSLATORS: Use space (SPC) as msgstr/d' $TMP1
  # Remove the fuzzy markers and the comments (except #. Type: [...])
  sed -i '/^#[^\.] /d' $TMP1
  # Remove "msgid" and "msgstr".
  sed -i -e 's,^msg\(id\|str\) ",,' \
         -e 's,"$,,' $TMP1


## Link extraction

  # Label the links.
  awk 'BEGIN {RS=ORS="</a>"}
      {gsub ( /<a /, "<a {"NR"}<lnk no."NR">", $0 ); print}
      END {RS=ORS="\n"}' $TMP1 > $TMP2
  # Remove an extra </a> that was added by awk.
  sed -i 's,^</a>$,,' $TMP2

  # Delete the links from the text.
  sed -e 's,<lnk no.[0-9]\+>[^>]*>,>,g' $TMP2 > $TMP1

  # Extract the links and add them after the text.
  sed -e 's,\(<lnk no.[0-9]\+>[^>]*\)>,\1\n,g' $TMP2 > $TMP3
  sed -i 's,<lnk,\n<lnk,g' $TMP3
  sed -n '/^<lnk/p'  $TMP3 >> $TMP1

  # Split after the link labels and add 2 blank lines after each link.
  sed -i 's,^\(<lnk no.[0-9]\+>\),\n\n\1\n,' $TMP1


## Final steps

  # Optionally add a header.
  echo "Nom du pad : EnFr-$name" > $wdir/EnFr-$name.pad
  echo "Traduction en français de $url" >> $wdir/EnFr-$name.pad
  cat $wdir/pad-header-gnu $TMP1 >> $wdir/EnFr-$name.pad

  # Add 2 trailing blank lines (needed for link insertion by pad2po).
  echo -e "\n\n" >> $wdir/EnFr-$name.pad

  # Display the pad.
  $geditor $wdir/EnFr-$name.pad


## Wrong file

else
  echo "!!! Ce n'est pas un fichier PO."
  echo "    Valider pour fermer le terminal."
  read
  exit 1
fi

exit 0
